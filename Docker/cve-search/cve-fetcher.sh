#!/bin/bash

# Enable strict error handling and debug mode
set -euo pipefail
set -x  # Enable debug mode (remove or comment out if not needed)

# -------------------------------------------------------------------
# cve-fetcher.sh
# 
# Description:
#   Fetches CVE data from the NVD API based on user-provided search 
#   terms and the number of days to look back.
# 
# Usage:
#   ./cve-fetcher.sh "search term" [days]
# 
#   "search term" : Free-text search query (e.g., "Wordpress")
#   [days]         : Number of days back to search (default: 7)
# -------------------------------------------------------------------

# Default number of days if not provided
DEFAULT_DAYS=7

# Function to display usage instructions
usage() {
  echo "Usage: $0 \"search term\" [days]"
  echo "  \"search term\" : Free-text search term (e.g., \"Wordpress\")"
  echo "  [days]         : Number of days back to search (default: $DEFAULT_DAYS)"
  exit 1
}

# Check if at least one argument (search term) is provided
if [ $# -lt 1 ]; then
  echo "Error: Missing search term."
  usage
fi

# Assign command-line arguments to variables
SEARCH_TERM="$1"
DAYS="${2:-$DEFAULT_DAYS}"  # Use default if days not provided

# Validate that DAYS is a positive integer
if ! [[ "$DAYS" =~ ^[0-9]+$ ]]; then
  echo "Error: Number of days must be a positive integer."
  usage
fi

echo "Search Term: $SEARCH_TERM"
echo "Days: $DAYS"

# NVD API base URL
BASE_URL="https://services.nvd.nist.gov/rest/json/cves/2.0"

# Get current UTC time and time from DAYS ago in ISO-8601 format
END_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
START_DATE=$(date -u -d "-${DAYS} days" +"%Y-%m-%dT%H:%M:%SZ")

echo "Start Date: $START_DATE"
echo "End Date: $END_DATE"

# Your NVD API key (ensure it's exported in your environment or replace with actual key)
API_KEY="${NVD_API_KEY}"

# Check if API key is set
if [ -z "$API_KEY" ]; then
  echo "Error: NVD_API_KEY is not set. Please export your API key as NVD_API_KEY."
  exit 1
fi

# Build the API request parameters without '=true' for noRejected
PARAMS=(
  "pubStartDate=${START_DATE}"
  "pubEndDate=${END_DATE}"
  "keywordSearch=${SEARCH_TERM}"
  "resultsPerPage=2000"
  "noRejected"  # Changed from "noRejected=true" to "noRejected"
)

# Execute the curl command and capture HTTP status code
RESPONSE=$(curl -s -w "\n%{http_code}" -G "${BASE_URL}" \
     -H "apiKey: ${API_KEY}" \
     --data-urlencode "${PARAMS[0]}" \
     --data-urlencode "${PARAMS[1]}" \
     --data-urlencode "${PARAMS[2]}" \
     --data-urlencode "${PARAMS[3]}" \
     --data-urlencode "${PARAMS[4]}")

# Split RESPONSE into body and status code
HTTP_BODY=$(echo "$RESPONSE" | sed '$d')
HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)

echo "HTTP Status Code: $HTTP_STATUS"

# Check if curl was successful
if [ "$HTTP_STATUS" -ne 200 ]; then
  echo "Error: Received HTTP status code $HTTP_STATUS from NVD API."
  echo "Response Body:"
  echo "$HTTP_BODY"
  exit 1
fi

# Print the raw API response
echo "Raw API Response:"
echo "$HTTP_BODY"

# Check if vulnerabilities exist in the response
if ! echo "$HTTP_BODY" | jq -e '.vulnerabilities' > /dev/null; then
  echo "No vulnerabilities found or invalid response structure."
  exit 0
fi

# Pipe to jq to format as a JSON array
echo "$HTTP_BODY" | jq '[.vulnerabilities[] | {
  cveId: .cve.id,
  description: (.cve.descriptions[]? | select(.lang == "en") | .value // "No description available"),
  publishedDate: .cve.published,
  severity: (
    if .cve.metrics.cvssMetricV31? then
      .cve.metrics.cvssMetricV31[0].cvssData.baseSeverity
    elif .cve.metrics.cvssMetricV30? then
      .cve.metrics.cvssMetricV30[0].cvssData.baseSeverity
    elif .cve.metrics.cvssMetricV2? then
      .cve.metrics.cvssMetricV2[0].baseSeverity
    else
      "N/A"
    end
  ),
  cweIds: ([.cve.weaknesses[]?.description[]?.value | select(test("^CWE-"))] | unique)
}]'
